#! /usr/bin/env ruby

require 'thor'
require 'csv'

class CSVP < Thor
  option :output_file, desc: 'filename to output the spreadshee too', aliases: '-o'
  option :compare, default: 'sku', desc: 'header used to compare spreadsheets, sku by default', aliases: '-c'
  desc 'intersect', 'takes intersection A of B, outputing only rows in B that are in both A and B'
  long_desc <<-LONGDESC
  compares by sku header by default, but you can change that by adding another argument after the second spreadsheet
  LONGDESC
  def intersect(a, b)
    a = read_table(a)
    b = read_table(b)
    compare_header = options['compare']
    common = a[compare_header] & b[compare_header]

    c = CSV::Table.new(b.select { |row| common.include?(row[compare_header]) })
    write_table(c, options)
    # TODO add stats
  end

  option :output_file, desc: 'filename to output the spreadshee too', aliases: '-o'
  option :compare, default: 'sku', desc: 'header used to compare spreadsheets, sku by default', aliases: '-c'
  desc 'diff', 'takes two spreadsheets, A and B, and leaves only rows A has that B doesn\'t'
  long_desc <<-LONGDESC
  compares by sku header by default, but you can change that by adding another argument after the second spreadsheet
  LONGDESC
  def diff(a, b)
    a = read_table(a)
    b = read_table(b)
    compare_header = options['compare']

    diff = a[compare_header] - b[compare_header]
    c = CSV::Table.new(a.select { |row| diff.include?(row[compare_header]) })
    write_table(c, options)
  end

  # TODO Diffbot image add
  # desc "image_add", "
  # def image_add()
  # end

  private

  def write_table(csv, options = {})
    # TODO: if file exists prompt to overwrite
    if options['output_file']
      options['output_file'].tap do |filename|
        puts "writing to #{filename}"
        File.write(filename, csv.to_s)
      end
    else
      puts csv.to_s
    end
  end

  def read_table(csv, options = {})
    raise "can't find #{csv}" unless File.exist?(csv)
    raise "file #{csv} is not a CSV file!" unless File.extname(csv) == '.csv'
    CSV.new(File.read(csv), headers: true, row_sep: :auto, skip_lines: /\A[,\s]*\z/).read
  end

  def put_stats(stats)
    # k_padding is the number of characters in the longest key
    k_padding = stats.keys.map(&:length).reduce { |a, b| a > b ? a : b }
    stats.each { |k, v| puts "  #{k.to_s.rjust(k_padding, ' ')}: #{v}" }
  end
end

CSVP.start(ARGV)
